// services/post-service/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String     @id @default(uuid())
  title     String
  content   String     @db.Text
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  tags      PostTag[]
  comments  Comment[]
  reactions Reaction[]
  image     Image[]
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  posts     PostTag[]
}

model PostTag {
  postId    String
  tagId     String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@id([postId, tagId])
}

model Comment {
  id           String     @id @default(uuid())
  content      String     @db.Text
  postId       String?
  parentId     String?
  parent       Comment?   @relation("ParentComment", fields: [parentId], references: [id])
  childComment Comment[]  @relation("ParentComment")
  post         Post?      @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  Reaction     Reaction[]
}

model Reaction {
  id        String       @id @default(uuid())
  userId    String
  postId    String?
  post      Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  type      ReactionType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?

  @@unique([userId, postId, type])
  @@index([postId])
  @@index([userId])
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

model Image {
  id        String    @id @default(uuid())
  url       String
  altText   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  postId    String
  post      Post      @relation(fields: [postId], references: [id])
}
